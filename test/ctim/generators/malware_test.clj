(ns ctim.generators.malware-test
  (:require  [clojure.test :refer [use-fixtures]]
             [clojure.test.check.clojure-test :refer [defspec]]
             [ctim.test-helpers.core :as th]
             [clj-momo.test-helpers.core :as mth]
             [ctim.schemas.malware :as sut]
             [ctim.test-helpers.properties :as property]
             [flanders.utils :as fu]))

(use-fixtures :once
  th/fixture-spec-validation
  th/fixture-fast-gen
  mth/fixture-schema-validation
  (th/fixture-spec sut/Malware
                   "test.malware")
  (th/fixture-spec sut/NewMalware
                   "test.new-malware")
  (th/fixture-spec sut/StoredMalware
                   "test.stored-malware")
  (th/fixture-spec (fu/require-all sut/Malware)
                   "test.max.malware")
  (th/fixture-spec (fu/require-all sut/NewMalware)
                   "test.max.new-malware")
  (th/fixture-spec (fu/require-all sut/StoredMalware)
                   "test.max.stored-malware"))

;; Malware

(defspec ^:gen spec-generated-malware-is-valid
  (property/generated-entity-is-valid :test.malware/map))

(defspec ^:gen spec-generated-max-malware-is-valid
  (property/generated-entity-is-valid :test.max.malware/map))

(defspec ^:gen spec-generated-malware-id-is-valid
  (property/generated-entity-id-is-valid :test.malware/map
                                         "malware"))

;; New Malware

(defspec ^:gen spec-generated-new-malware-is-valid
  (property/generated-entity-is-valid :test.new-malware/map))

(defspec ^:gen spec-generated-max-new-malware-is-valid
  (property/generated-entity-is-valid :test.max.malware/map))

(defspec ^:gen spec-generated-new-malware-id-is-valid
  (property/generated-entity-id-is-valid :test.new-malware/map
                                         "malware"
                                         :optional))

;; Stored Malware

(defspec ^:gen spec-generated-stored-malware-is-valid
  (property/generated-entity-is-valid :test.stored-malware/map))

(defspec ^:gen spec-generated-max-stored-malware-is-valid
  (property/generated-entity-is-valid :test.max.stored-malware/map))

(defspec ^:gen spec-generated-stored-malware-id-is-valid
  (property/generated-entity-id-is-valid :test.stored-malware/map
                                         "malware"))
